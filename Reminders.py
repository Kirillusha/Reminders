# Reminders
#–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
# -*- coding: utf-8 -*-
# meta developer: @ST_Modules
# scope: hikka_only
# scope: hikka_min 1.3.0

import asyncio
import datetime
import re
from typing import Union

from hikkatl.tl.types import Message

from .. import loader, utils


@loader.tds
class RemindersMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    strings = {
        "name": "Reminders",
        "remind_usage": "üö´ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç></code>\n–ü—Ä–∏–º–µ—Ä: <code>.remind 30m –∫—É–ø–∏—Ç—å —Ö–ª–µ–±</code>",
        "timer_usage": "üö´ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.timer <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç></code>\n–ü—Ä–∏–º–µ—Ä: <code>.timer 22:00 –≤—Å–µ–º —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏</code>",
        "remind_set": "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n‚è∞ <b>–ß–µ—Ä–µ–∑:</b> {}\nüìù <b>–¢–µ–∫—Å—Ç:</b> <code>{}</code>",
        "timer_set": "‚úÖ <b>–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n‚è∞ <b>–í—Ä–µ–º—è:</b> {}\nüìù <b>–¢–µ–∫—Å—Ç:</b> <code>{}</code>",
        "invalid_time": "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 10m, 2h, 1d",
        "remind_arrived": "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\nüìù {}",
        "timer_arrived": "‚è∞ <b>–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!</b>\nüìù {}",
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        await self._restore_reminders()

    async def _restore_reminders(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        reminders = self._db.get(__name__, "active_reminders", {})
        for remind_id, remind_data in reminders.items():
            asyncio.create_task(self._wait_and_remind(remind_id, remind_data))

    def _parse_time(self, time_str: str) -> Union[int, None]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        time_str = time_str.lower()
        patterns = {
            "s": r"(\d+)s",  # —Å–µ–∫—É–Ω–¥—ã
            "m": r"(\d+)m",  # –º–∏–Ω—É—Ç—ã
            "h": r"(\d+)h",  # —á–∞—Å—ã
            "d": r"(\d+)d",  # –¥–Ω–∏
            "time": r"(\d{1,2}):(\d{2})",  # –≤—Ä–µ–º—è HH:MM
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        for unit, pattern in patterns.items():
            if unit == "time":
                continue
            match = re.match(pattern, time_str)
            if match:
                value = int(match.group(1))
                multipliers = {"s": 1, "m": 60, "h": 3600, "d": 86400}
                return value * multipliers[unit]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM
        time_match = re.match(patterns["time"], time_str)
        if time_match:
            hours = int(time_match.group(1))
            minutes = int(time_match.group(2))
            
            now = datetime.datetime.now()
            target_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if target_time <= now:
                target_time += datetime.timedelta(days=1)
            
            return int((target_time - now).total_seconds())

        return None

    async def _wait_and_remind(self, remind_id: str, remind_data: dict):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            await asyncio.sleep(remind_data["delay"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await self._client.send_message(
                remind_data["chat_id"],
                self.strings["remind_arrived"].format(remind_data["text"])
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders = self._db.get(__name__, "active_reminders", {})
            reminders.pop(remind_id, None)
            self._db.set(__name__, "active_reminders", reminders)
            
        except Exception as e:
            self._db.set(__name__, "active_reminders", {})
            raise e

    @loader.command()
    async def remind(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - .remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["remind_usage"])
            return

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
        parts = args.split(" ", 1)
        if len(parts) < 2:
            await utils.answer(message, self.strings["remind_usage"])
            return

        time_str, text = parts
        delay = self._parse_time(time_str)

        if delay is None:
            await utils.answer(message, self.strings["invalid_time"])
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        remind_id = f"remind_{datetime.datetime.now().timestamp()}"
        remind_data = {
            "delay": delay,
            "text": text,
            "chat_id": message.chat_id,
            "message_id": message.id,
        }

        reminders = self._db.get(__name__, "active_reminders", {})
        reminders[remind_id] = remind_data
        self._db.set(__name__, "active_reminders", reminders)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        asyncio.create_task(self._wait_and_remind(remind_id, remind_data))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        time_formatted = self._format_time(delay)
        await utils.answer(
            message,
            self.strings["remind_set"].format(time_formatted, text)
        )

    @loader.command()
    async def timer(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è - .timer <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["timer_usage"])
            return

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
        parts = args.split(" ", 1)
        if len(parts) < 2:
            await utils.answer(message, self.strings["timer_usage"])
            return

        time_str, text = parts
        delay = self._parse_time(time_str)

        if delay is None:
            await utils.answer(message, self.strings["invalid_time"])
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        timer_id = f"timer_{datetime.datetime.now().timestamp()}"
        timer_data = {
            "delay": delay,
            "text": text,
            "chat_id": message.chat_id,
            "message_id": message.id,
        }

        reminders = self._db.get(__name__, "active_reminders", {})
        reminders[timer_id] = timer_data
        self._db.set(__name__, "active_reminders", reminders)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        asyncio.create_task(self._wait_and_remind(timer_id, timer_data))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        trigger_time = datetime.datetime.now() + datetime.timedelta(seconds=delay)
        time_formatted = trigger_time.strftime("%H:%M")
        
        await utils.answer(
            message,
            self.strings["timer_set"].format(time_formatted, text)
        )

    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            return f"{seconds // 60} –º–∏–Ω"
        elif seconds < 86400:
            return f"{seconds // 3600} —á–∞—Å"
        else:
            return f"{seconds // 86400} –¥–Ω"

    async def on_unload(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        self._db.set(__name__, "active_reminders", {})
